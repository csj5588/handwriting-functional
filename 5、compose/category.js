/**
 * 范畴学
 * 范畴学（category theory）是数学中的一个抽象分支，
 * 能够形式化诸如集合论（set theory）、类型论（type theory）、群论（group theory）以及逻辑学（logic）等数学分支中的一些概念。
 * 范畴学主要处理对象（object）、态射（morphism）和变化式（transformation），而这些概念跟编程的联系非常紧密。
 * 下图是一些相同的概念分别在不同理论下的形式：
 * 
 * 抱歉，我没有任何要吓唬你的意思。我并不假设你对这些概念都了如指掌，我只是想让你明白这里面有多少重复的内容，让你知道为何范畴学要统一这些概念。
 * 
 * 在范畴学中，有一个概念叫做。。。范畴。有着一下这些组件的搜集就构成了一个范畴：
 * 
 * 对象的搜集
 * 态射的搜集
 * 态射的组合
 * identity这个独特的态射。
 * 
 * 范畴学抽象到足以模拟任何食物，不过目前我们最关心的还是类型和函数，所以让我们把范畴学运用到它们身上看看。
 * 
 * 对象的搜集
 * 
 * 对象就是数据累心能，例如String、Boolean、Number和Object等等。
 * 通常我们把数据类型视作有可能的值的一个集合Set。像Boolean就可以看作是【true，false】的集合，
 * Number可以是所有实数的一个集合。把类型当作集合对待是有好处的，因为我们可以利用集合论（set theory）处理类型。
 * 
 * 态射的搜集
 * 态射是标准的、普通的纯函数。
 * 
 * 态射的组合
 * 
 * 你可能猜到了，这就是本章介绍的新玩意 -- 组合。我们已经讨论过compose函数是符合结合律的，这并非巧合
 * 结合律是在范畴学中对任何组合都适用的一个特性。
 * 
 * 这里有一个具体的例子：
 */

var compose = function(f, g) {
  return function(x) {
    return f(g(x));
  }
}

var g = function(x) { return x.length; };
var f = function(x) { return x === 4 }
var isFourLetterWord = compose(f, g); 

/**
 * identity这个独特的射态
 * 让我们介绍一个名为id的实用函数。这个函数接受随便什么输入然后原封不动地返回他；
 * 你可能会问“这到底哪里有用了？”。别急，我们会在随后的章节中拓展这个函数的，
 * 暂时先把它当作一个可以替代给定值的函数——一个假装自己是普通数据的函数。
 */

var id = function(x) { return x };

